GRANT ALL PRIVILEGES TO SYSTEM;

-- Crear las secuencias primero
CREATE SEQUENCE GS_PROGRAMAS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_FICHA_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_TERCERO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_ROL_SOLICITANTE_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_SOLICITANTE_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_ROLUSUARIO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_USUARIO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_TIPO_PRODUCTO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_PRODUCTO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_SOLICITUD_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_PRODUCTOSOLICITUD_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE HS_PRESTAMO_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_SANCION_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GS_LOG_TRAZABILIDAD_SEQ START WITH 1 INCREMENT BY 1;

-- Crear las tablas
CREATE TABLE GS_PROGRAMAS (
    CODPROGRAMA VARCHAR(20) PRIMARY KEY,
    NOMBRE_PROGRAMA VARCHAR(100) NOT NULL
);

CREATE TABLE GS_FICHA (
    CODFICHA VARCHAR(20) PRIMARY KEY,
    CODPROGRAMA VARCHAR(20),
    FECHA_INICIO DATE,
    FECHA_FIN DATE,
    CONSTRAINT fk_codprograma FOREIGN KEY (CODPROGRAMA)
        REFERENCES GS_PROGRAMAS (CODPROGRAMA)
);

CREATE TABLE GS_ROL_SOLICITANTE (
    IDROLSOLICITANTE NUMBER PRIMARY KEY,
    NOMBRE_ROL_SOLICITANTE VARCHAR(30)
);

CREATE TABLE GS_TERCERO (
    IDENTIFICACION VARCHAR(30) NOT NULL PRIMARY KEY,
    PRIMER_NOMBRE VARCHAR(50) NOT NULL,
    SEGUNDO_NOMBRE VARCHAR(50),
    PRIMER_APELLIDO VARCHAR(50) NOT NULL,
    SEGUNDO_APELLIDO VARCHAR(50),
    CORREO VARCHAR(60) NOT NULL,
    TELEFONO VARCHAR(20),
    IDROL NUMBER,
    GENERO VARCHAR(4) NOT NULL,
    ACTIVO NVARCHAR2(1) DEFAULT 'S' CHECK (ACTIVO IN ('S', 'N')),
    CONSTRAINT fk_idrolsolicitante FOREIGN KEY (IDROL) REFERENCES GS_ROL_SOLICITANTE (IDROLSOLICITANTE)
);



CREATE TABLE GS_SOLICITANTE (
    IDSOLICITANTE NUMBER PRIMARY KEY,
    IDENTIFICACION VARCHAR(30) NOT NULL,
    CODFICHA VARCHAR(20),
    CODPROGRAMA VARCHAR(20),
    CONSTRAINT fk_idtercero FOREIGN KEY (IDENTIFICACION) REFERENCES GS_TERCERO (IDENTIFICACION),
    CONSTRAINT fk_idficha FOREIGN KEY (CODFICHA) REFERENCES GS_FICHA (CODFICHA),
    CONSTRAINT fk_idcodiprograma FOREIGN KEY (CODPROGRAMA) REFERENCES GS_PROGRAMAS (CODPROGRAMA)
);
    
CREATE TABLE GS_ROLUSUARIO (
    IDROL NUMBER PRIMARY KEY,
    NOMBRE_ROL VARCHAR(30));

CREATE TABLE GS_USUARIO (
    IDUSUARIO NUMBER PRIMARY KEY,
    IDENTIFICACION VARCHAR(30) NOT NULL UNIQUE,
    PASSWORDS VARCHAR(8) NOT NULL,
    IDROL NUMBER NOT NULL,
    ESTADOUSUARIO NUMBER,
    CONSTRAINT FK_IDTERCEROUSUARIO FOREIGN KEY (IDENTIFICACION) REFERENCES GS_TERCERO(IDENTIFICACION),
    CONSTRAINT FK_IDROLUSUARIO FOREIGN KEY (IDROL) REFERENCES GS_ROLUSUARIO(IDROL)
);

CREATE TABLE GS_TIPO_PRODUCTO (
    IDTIPOPRODUCTO NUMBER PRIMARY KEY,
    NOMBRE_TIPO_PRODUCTO VARCHAR(60) NOT NULL
);

CREATE TABLE GS_PRODUCTO (
    CODIGOINTERNO VARCHAR(100) PRIMARY KEY,
    SERIAL VARCHAR(100),
    NOMBREPRODUCTO VARCHAR(60) NOT NULL,
    MARCA VARCHAR(60),
    IDTIPOPRODUCTO NUMBER NOT NULL,
    DESCRIPCION VARCHAR(300),
    ESTADO VARCHAR(20),
    CODIGOSENA VARCHAR(50),
    CONSTRAINT FK_TIPOPRODUCTO FOREIGN KEY (IDTIPOPRODUCTO) REFERENCES GS_TIPO_PRODUCTO(IDTIPOPRODUCTO)
);

CREATE TABLE GS_SOLICITUD (
    IDSOLICITUD NUMBER PRIMARY KEY,
    IDENTIFICACION VARCHAR(30),
    CODIGOINTERNO VARCHAR(100),
    FECHAREGISTRO DATE,
    ESTADO VARCHAR(20),
    CONSTRAINT FK_IDTERCEROUSUARIO_S FOREIGN KEY (IDENTIFICACION) REFERENCES GS_TERCERO(IDENTIFICACION),
    CONSTRAINT FK_IDPRODUCTO_S FOREIGN KEY (CODIGOINTERNO) REFERENCES GS_PRODUCTO(CODIGOINTERNO)
);



CREATE TABLE GS_PRODUCTOSOLICITUD (
    IDPRODUCTOSOLICITUD NUMBER PRIMARY KEY,
    CODIGOINTERNO VARCHAR(100),
    SOLICITUD_S NUMBER,
    CONSTRAINT FK_IDPRODUCTOSOLICITUD FOREIGN KEY (CODIGOINTERNO) REFERENCES GS_PRODUCTO(CODIGOINTERNO),
    CONSTRAINT FK_SOLICITUDPRODUCTO FOREIGN KEY (SOLICITUD_S) REFERENCES GS_SOLICITUD(IDSOLICITUD)
);

CREATE TABLE HS_PRESTAMO (
    IDPRESTAMO NUMBER PRIMARY KEY,
    IDSOLICITUD NUMBER,
    FECHA_REGISTRO DATE,
    CONSTRAINT FK_SOLICITUDPRESTAMO FOREIGN KEY (IDSOLICITUD) REFERENCES GS_SOLICITUD(IDSOLICITUD)
);

CREATE TABLE GS_SANCION (
    IDSANCION NUMBER PRIMARY KEY,
    IDENTIFICACION VARCHAR(30) NOT NULL,
    CONSTRAINT FK_IDTERCEROSANCION FOREIGN KEY (IDENTIFICACION) REFERENCES GS_TERCERO(IDENTIFICACION)
);

CREATE TABLE GS_LOG_TRAZABILIDAD (
    IDLOG NUMBER PRIMARY KEY,
    IDUSUARIO NUMBER NOT NULL,
    FECHA DATE DEFAULT SYSDATE,
    ACCION VARCHAR(20) NOT NULL,
    NOMBRE_TABLA VARCHAR(50) NOT NULL,
    DATOS_ANTERIORES VARCHAR(4000),
    DATOS_NUEVOS VARCHAR(4000),
    CONSTRAINT FK_USUARIO_LOG FOREIGN KEY (IDUSUARIO) REFERENCES GS_USUARIO(IDUSUARIO)
);

-- Crear los triggers para asignar automáticamente las secuencias en los campos ID
CREATE OR REPLACE TRIGGER GS_PROGRAMAS_TRIG
BEFORE INSERT ON GS_PROGRAMAS
FOR EACH ROW
BEGIN
    IF :NEW.CODPROGRAMA IS NULL THEN
        SELECT GS_PROGRAMAS_SEQ.NEXTVAL INTO :NEW.CODPROGRAMA FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_FICHA_TRIG
BEFORE INSERT ON GS_FICHA
FOR EACH ROW
BEGIN
    IF :NEW.CODFICHA IS NULL THEN
        SELECT GS_FICHA_SEQ.NEXTVAL INTO :NEW.CODFICHA FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_TERCERO_TRIG
BEFORE INSERT ON GS_TERCERO
FOR EACH ROW
BEGIN
    IF :NEW.IDENTIFICACION IS NULL THEN
        SELECT GS_TERCERO_SEQ.NEXTVAL INTO :NEW.IDENTIFICACION FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_ROL_SOLICITANTE_TRIG
BEFORE INSERT ON GS_ROL_SOLICITANTE
FOR EACH ROW
BEGIN
    IF :NEW.IDROLSOLICITANTE IS NULL THEN
        SELECT GS_ROL_SOLICITANTE_SEQ.NEXTVAL INTO :NEW.IDROLSOLICITANTE FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_SOLICITANTE_TRIG
BEFORE INSERT ON GS_SOLICITANTE
FOR EACH ROW
BEGIN
    IF :NEW.IDSOLICITANTE IS NULL THEN
        SELECT GS_SOLICITANTE_SEQ.NEXTVAL INTO :NEW.IDSOLICITANTE FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_ROLUSUARIO_TRIG
BEFORE INSERT ON GS_ROLUSUARIO
FOR EACH ROW
BEGIN
    IF :NEW.IDROL IS NULL THEN
        SELECT GS_ROLUSUARIO_SEQ.NEXTVAL INTO :NEW.IDROL FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_USUARIO_TRIG
BEFORE INSERT ON GS_USUARIO
FOR EACH ROW
BEGIN
    IF :NEW.IDUSUARIO IS NULL THEN
        SELECT GS_USUARIO_SEQ.NEXTVAL INTO :NEW.IDUSUARIO FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_TIPO_PRODUCTO_TRIG
BEFORE INSERT ON GS_TIPO_PRODUCTO
FOR EACH ROW
BEGIN
    IF :NEW.IDTIPOPRODUCTO IS NULL THEN
        SELECT GS_TIPO_PRODUCTO_SEQ.NEXTVAL INTO :NEW.IDTIPOPRODUCTO FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_PRODUCTO_TRIG
BEFORE INSERT ON GS_PRODUCTO
FOR EACH ROW
BEGIN
    IF :NEW.CODIGOINTERNO IS NULL THEN
        SELECT GS_PRODUCTO_SEQ.NEXTVAL INTO :NEW.CODIGOINTERNO FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_SOLICITUD_TRIG
BEFORE INSERT ON GS_SOLICITUD
FOR EACH ROW
BEGIN
    IF :NEW.IDSOLICITUD IS NULL THEN
        SELECT GS_SOLICITUD_SEQ.NEXTVAL INTO :NEW.IDSOLICITUD FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_PRODUCTOSOLICITUD_TRIG
BEFORE INSERT ON GS_PRODUCTOSOLICITUD
FOR EACH ROW
BEGIN
    IF :NEW.IDPRODUCTOSOLICITUD IS NULL THEN
        SELECT GS_PRODUCTOSOLICITUD_SEQ.NEXTVAL INTO :NEW.IDPRODUCTOSOLICITUD FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER HS_PRESTAMO_TRIG
BEFORE INSERT ON HS_PRESTAMO
FOR EACH ROW
BEGIN
    IF :NEW.IDPRESTAMO IS NULL THEN
        SELECT HS_PRESTAMO_SEQ.NEXTVAL INTO :NEW.IDPRESTAMO FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_SANCION_TRIG
BEFORE INSERT ON GS_SANCION
FOR EACH ROW
BEGIN
    IF :NEW.IDSANCION IS NULL THEN
        SELECT GS_SANCION_SEQ.NEXTVAL INTO :NEW.IDSANCION FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GS_LOG_TRAZABILIDAD_TRIG
BEFORE INSERT ON GS_LOG_TRAZABILIDAD
FOR EACH ROW
BEGIN
    IF :NEW.IDLOG IS NULL THEN
        SELECT GS_LOG_TRAZABILIDAD_SEQ.NEXTVAL INTO :NEW.IDLOG FROM DUAL;
    END IF;
END;


create or replace NONEDITIONABLE PACKAGE PKG_SOLICITUD AS
    PROCEDURE INSERTAR_SOLICITUD(
        p_identificacion     IN VARCHAR2,
        p_codigo_interno     IN VARCHAR2,
        p_estado_producto    IN NUMBER,
        p_id_solicitud       IN NUMBER   -- Añadido este parámetro
    );
END PKG_SOLICITUD;


create or replace NONEDITIONABLE PACKAGE BODY PKG_SOLICITUD AS
    PROCEDURE INSERTAR_SOLICITUD(
        p_identificacion     IN VARCHAR2,
        p_codigo_interno     IN VARCHAR2,
        p_estado_producto    IN NUMBER,
        p_id_solicitud       IN NUMBER 
    ) IS
        v_id_solicitud   NUMBER;
        v_count_tercero  NUMBER;
        v_count_producto NUMBER;
       v_estado_producto_actual VARCHAR2(20); -- Variable para almacenar el estado actual del producto
        v_count_solicitud NUMBER;  -- Variable para verificar si ya existe una solicitud activa
    BEGIN

        

        /*-- Verificar si ya existe una solicitud activa (no devuelta) para este producto e identificación
        SELECT COUNT(*)
        INTO v_count_solicitud
        FROM GS_SOLICITUD
        WHERE IDENTIFICACION = p_identificacion
          AND CODIGOINTERNO = p_codigo_interno
          AND ESTADO != 'Devuelto';  -- Solo verificamos solicitudes que no han sido devueltas

        IF v_count_solicitud > 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'Ya existe una solicitud activa para este producto e identificación.');
        END IF;
*/
        -- Condicional para manejar el estado del producto
            IF p_estado_producto = 1 THEN
            -- Validar que el producto principal exista en GS_PRODUCTO
            SELECT COUNT(*)
            INTO v_count_producto
            FROM GS_PRODUCTO
            WHERE CODIGOINTERNO = p_codigo_interno;

            IF v_count_producto = 0 THEN
                 RAISE_APPLICATION_ERROR(-20002, 'El código interno del producto no existe en GS_PRODUCTO.');
            END IF;

            -- Validar que la identificación exista en GS_TERCERO
            SELECT COUNT(*)
            INTO v_count_tercero
            FROM GS_TERCERO
            WHERE IDENTIFICACION = p_identificacion;

            IF v_count_tercero = 0 THEN
                RAISE_APPLICATION_ERROR(-20001, 'La identificación no existe en GS_TERCERO.');
            END IF;
            -- Validar si el producto ya tiene el estado 'No disponible'
            SELECT ESTADO
            INTO v_estado_producto_actual
            FROM GS_PRODUCTO
            WHERE CODIGOINTERNO = p_codigo_interno;

            IF v_estado_producto_actual = 'No disponible' THEN
                RAISE_APPLICATION_ERROR(-20003, 'El producto seleccionado está marcado como "No disponible". Seleccione otro producto.');
            END IF;
 
            -- Insertar en GS_SOLICITUD con la fecha de hoy
            INSERT INTO GS_SOLICITUD (IDSOLICITUD, IDENTIFICACION, CODIGOINTERNO, FECHAREGISTRO, ESTADO)
            VALUES (GS_SOLICITUD_SEQ.NEXTVAL, p_identificacion, p_codigo_interno, SYSDATE, 'No devuelto')
            RETURNING IDSOLICITUD INTO v_id_solicitud;

            -- Insertar en GS_PRODUCTOSOLICITUD para el producto
            INSERT INTO GS_PRODUCTOSOLICITUD (IDPRODUCTOSOLICITUD, CODIGOINTERNO, SOLICITUD_S)
            VALUES (GS_PRODUCTOSOLICITUD_SEQ.NEXTVAL, p_codigo_interno, v_id_solicitud);

            -- Insertar en HS_PRESTAMO
            INSERT INTO HS_PRESTAMO (IDPRESTAMO, IDSOLICITUD, FECHA_REGISTRO)
            VALUES (HS_PRESTAMO_SEQ.NEXTVAL, v_id_solicitud, SYSDATE);

            -- Actualizar el estado del producto a No disponible
            UPDATE GS_PRODUCTO
            SET ESTADO = 'No disponible'
            WHERE CODIGOINTERNO = p_codigo_interno;

            -- Actualizar el estado de la solicitud a 'No devuelto'
            UPDATE GS_SOLICITUD
            SET ESTADO = 'No devuelto'
            WHERE  IDSOLICITUD = v_id_solicitud;
         
          

        ELSIF p_estado_producto = 2 THEN
            -- Solo actualizar el estado del producto a 'Disponible'
            UPDATE GS_PRODUCTO
            SET ESTADO = 'Disponible'
            WHERE CODIGOINTERNO = (select CODIGOINTERNO from gs_solicitud where IDSOLICITUD = p_id_solicitud group by CODIGOINTERNO );

            -- Actualizar el estado de la solicitud a 'Devuelto'
            UPDATE GS_SOLICITUD
            SET ESTADO = 'Devuelto'
            WHERE IDSOLICITUD = p_id_solicitud; 
           
        END IF;

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END INSERTAR_SOLICITUD;
END PKG_SOLICITUD;


---INSERTAR DATOS EN LAS TABLAS---
INSERT INTO GS_PROGRAMAS (codprograma, nombre_programa)
VALUES ('000', 'ADSO');
INSERT INTO GS_PROGRAMAS (codprograma, nombre_programa)
VALUES ('001', 'ESPECIES M.');
INSERT INTO GS_PROGRAMAS (codprograma, nombre_programa)
VALUES ('002', 'GANADERÌA');
INSERT INTO GS_ROLUSUARIO ( nombre_rol)
VALUES ('Administrador');
INSERT INTO GS_ROLUSUARIO ( nombre_rol)
VALUES ('Gestor');
INSERT INTO GS_ROL_SOLICITANTE (IDROLSOLICITANTE, NOMBRE_ROL_SOLICITANTE)
VALUES (GS_ROL_SOLICITANTE_SEQ.NEXTVAL,'Aprendiz');
INSERT INTO GS_ROL_SOLICITANTE (IDROLSOLICITANTE, NOMBRE_ROL_SOLICITANTE)
VALUES (GS_ROL_SOLICITANTE_SEQ.NEXTVAL,'Empleado');
INSERT INTO GS_FICHA (CODFICHA, CODPROGRAMA, FECHA_INICIO, FECHA_FIN)
VALUES ('F001', '000', TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'));
INSERT INTO GS_FICHA (CODFICHA, CODPROGRAMA, FECHA_INICIO, FECHA_FIN)
VALUES ('F002', '001', TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'));
INSERT INTO GS_TIPO_PRODUCTO (NOMBRE_TIPO_PRODUCTO)
VALUES ('Equipo');
INSERT INTO GS_TIPO_PRODUCTO (NOMBRE_TIPO_PRODUCTO)
VALUES ('Accesorio');
-- Inserción de un tercero
INSERT INTO GS_TERCERO (IDENTIFICACION, PRIMER_NOMBRE, SEGUNDO_NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, CORREO, TELEFONO, IDROL, GENERO, ACTIVO)
VALUES ('1234', 'Sharon', 'Mishell', 'Baute', 'Davilla', 'maria.gomez@example.com', '3109876543', 1, 'F', 'S');
-- Inserción de un usuario
INSERT INTO GS_USUARIO (IDUSUARIO, IDENTIFICACION, PASSWORDS, IDROL, ESTADOUSUARIO)
VALUES (GS_USUARIO_SEQ.NEXTVAL, '1234', '1234', 1, 1);
